{
  "name": "omdb",
  "version": "0.2.2",
  "author": {
    "name": "Mister Hat",
    "email": "misterhat144@gmail.com"
  },
  "description": "A module to access OMDb API.",
  "keywords": [
    "omdb",
    "imdb",
    "movies"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/misterhat/omdb.git"
  },
  "license": "MIT",
  "main": "index.js",
  "dependencies": {
    "needle": "^0.7.10"
  },
  "devDependencies": {
    "tap": "^0.4.13"
  },
  "bugs": {
    "url": "https://github.com/misterhat/omdb/issues"
  },
  "homepage": "https://github.com/misterhat/omdb",
  "scripts": {
    "test": "node test.js"
  },
  "readme": "# omdb\nA simple Node.JS module to access and normalize data from the\n[OMDb API](http://www.omdbapi.com/) by Bryan Fritz.\n\n## Installation\n    $ npm install omdb\n\n## Examples\n\n```javascript\nvar omdb = require('omdb');\n\nomdb.search('saw', function(err, movies) {\n    if(err) {\n        return console.error(err);\n    }\n\n    if(movies.length < 1) {\n        return console.log('No movies were found!');\n    }\n\n    movies.forEach(function(movie) {\n        console.log('%s (%d)', movie.title, movie.year);\n    });\n\n    // Saw (2004)\n    // Saw II (2005)\n    // Saw III (2006)\n    // Saw IV (2007)\n    // ...\n});\n\nomdb.get({ title: 'Saw', year: 2004 }, true, function(err, movie) {\n    if(err) {\n        return console.error(err);\n    }\n\n    if(!movie) {\n        return console.log('Movie not found!');\n    }\n\n    console.log('%s (%d) %d/10', movie.title, movie.year, movie.imdb.rating);\n    console.log(movie.plot);\n\n    // Saw (2004) 7.6/10\n    // Two men wake up at opposite sides of a dirty, disused bathroom, chained\n    // by their ankles to pipes. Between them lies...\n});\n```\n\n## API\n### omdb.search(terms, callback)\nRun a search request on the API.\n\n`terms` can either be a string of search terms, or the following object:\n```javascript\n{\n    terms: String, // `s` can also be used\n    year: Number, // optional (`y` can also be used)\n    type: 'series' || 'movie' || 'episode' // optional\n}\n```\n\n`callback` returns an array of movies. If no movies are found, the array\nis empty. The array will contain objects of the following:\n```javascript\n{\n    title: String, // the title of the movie\n    type: 'series' || 'movie' || 'episode',\n\n    // If `type` is \"series\":\n    year: {\n        from: Number,\n        to: Number || undefined // (if the series is still airing)\n    },\n\n    // Otherwise,\n    year: Number,\n\n    imdb: String\n}\n```\n\n### omdb.get(show, [fullPlot], callback)\nRun a single movie request on the API.\n\n`show` is assumed to be one of the following, respectively:\n\n1. An object with an `imdb` property.\n\n    `{ imdb: 'tt0387564' }`\n2. An object with a `title` property.\n\n    `{ title: 'Saw' }`\n3. An object with *both* a `title` and a `year` property.\n\n    `{ title: 'Saw', year: 2004 }`\n4. An IMDb ID string.\n\n    `'tt0387564'`\n5. A title string.\n\n    `'Saw'`\n\n`fullPlot` is an optional argument that if set to `true`, will attempt to\nrequest the extended version of the movie's plot.\n\n`callback` returns an object of the movie's information. If no movies are\nfound, it will return `null`.\n\nSee the following for a list of possible properties:\nhttps://github.com/misterhat/omdb/blob/master/index.js#L154\n\n### omdb.poster(show)\nReturn a readable stream of the poster JPEG.\n\n`show` is the same as the `show` argument used in `.get()`.\n\n## License\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "omdb@0.2.2",
  "dist": {
    "shasum": "cf692300806276e0ad48e31b4aa2edfc715c9bfe"
  },
  "_from": "omdb@",
  "_resolved": "https://registry.npmjs.org/omdb/-/omdb-0.2.2.tgz"
}
